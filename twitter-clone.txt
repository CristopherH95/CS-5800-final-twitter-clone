@startuml

struct HTTPData {
    + textData: String
    + fileData: Iterable<File>
}

interface ServerEndpoint {
    + isRequestValid(in request: HTTPData): boolean
    + handleRequest(in request: HTTPData): HTTPData
}

interface NotifiableObserver {
    + handleEvent(in event: Notifiable): void
}

interface Handled {
    + getHandle(): String
}

interface NotifiableDispatcher {
    + notifyObservers(in event: Notifiable): void
}

interface Notifiable {
    + getViewURI(): String
    + getShortView(): String
}

interface NotifiablesIterable {
    + iterator(): Iterator<Notifiable>
}

interface NotifiablesFeed extends NotifiablesIterable {
    + addToFeed(in item: Notifiable): void
}

interface Follower {
    + follow(in handle: String): void
    + unfollow(in handle: String): void
    + getFollowing(): Iterator<Followable>
}

interface Followable extends Handled {
    + addFollower(in follower: Follower): void
    + removeFollower(in follower: Follower): void
    + getFollowers(): Iterator<Follower>
}

interface FollowMediator {
    + follow(in from: Follower, in to: String): void
    + unfollow(in from: Follower, in to: String): void
}

interface Blocker {
    + block(in handle: String): void
    + unblock(in handle: String): void
}

interface BlockMediator {
    + block(in from: Blocker, in to: String): void
    + unblock(in from: Blocker, in to: String): void
}

interface Media {
    + getID(): int
    + getSource(): String
    + setSource(in source: String): void
    + getWebDisplay(): String
}

interface MediaIterable {
    + iterator(): Iterator<Media>
}

interface MediaContainer extends MediaIterable {
    + addMedia(in media: Media): void
    + removeMedia(in mediaID: int): void 
}

interface Liker {
    + likePost(in postID: int): void
    + unlikePost(in postID: int): void
}

interface Likeable {
    + addLiker(in liker: Liker): void
    + removeLiker(in liker: Liker): void
    + getLikesCount(): int
}

interface LikeMediator {
    + like(in from: Liker, in toPostID: int): void
    + unlike(in from: Liker, in toPostID: int): void
}

interface Post extends MediaContainer, Notifiable, Likeable {
    + getID(): int
    + getPoster(): Followable
    + getMentioned(): Iterator<Followable>
    + addReply(in replyPost: Post): void
    + getReplies(): Iterator<Post>
    + repost(): void
    + delete(): void
}

interface Poster extends Followable {
    + submitPost(in post: Post): void
}

interface PostMediator {
    + post(in post: Post): void
}

class Text implements Media {
    - String content
    + getContent(): String
    + setContent(in content: String): void
}

class Image implements Media {
    - String fileServerURL
    + getFileURL(): String
    + setFileURL(in fileURL: String): void
}

class Video implements Media {
    - String fileServerURL
    + getFileURL(): String
    + setFileURL(in fileURL: String): void
}

abstract class MediaFactory {
    + makeMedia(in source: String): Media {abstract}
}

class TextFactory extends MediaFactory {}

class ImageFactory extends MediaFactory {}

class VideoFactory extends MediaFactory {}

class User implements Follower, Poster, Blocker, NotifiableObserver, Liker {
    - id: int
    - handle: String
    - name: String
    - email: String
    - contentFeed: ContentIterable
    - addToFeed(in notifiable: Notifiable): void
    + getFeed(): ContentIterable
    + getEmail(): String
    + setEmail(in email: String): void
    + getName(): String
    + setName(in name: String): void
    + getID(): int
}

class UserBuilder {
    + makeUser(): User
    + setID(in id: int): void
    + setHandle(in handle: String): void
    + setName(in name: String): void
    + setEmail(in email: String): void
}

class Tweet implements Post {
    - id: int
    - media: ArrayList<Media>
    - userLookup: UserLookupService
    - postLookup: PostLookupService
    - parseMentions(): Iterator<Followable>
}

class ContentIterable implements NotifiablesFeed {
    - content: ArrayList<Notifiable>
}

class Topic implements Followable, NotifiableObserver {
    - handle: String
    - contentFeed: ContentIterable
    - addToFeed(in notifiable: Notifiable): void
    + getFeed(): ContentIterable
}


class UserLookupService {
    - users: Map<String, User>
    - instance: UserLookupService {static}
    + getInstance(): UserLookupService {static}
    + findUser(in handle: String): User
    + registerUser(in user: User): void
    + unregisterUser(in user: User): void
}

class TopicLookupService {
    - topics: Map<String, Topic>
    - instance: TopicLookupService {static}
    + getInstance(): TopicLookupService {static}
    + findTopic(in handle: String): Topic
    + registerTopic(in topic: Topic): void
    + unregisterTopic(in topic: Topic): void
}

class PostLookupService {
    - posts: Map<int, Post>
    - instance: PostLookupService {static}
    + getInstance(): PostLookupService {static}
    + findPost(in id: int): Post
    + registerPost(in post: Post): void
    + unregisterPost(in post: Post): void
}

class BlockCommunicationService implements BlockMediator {
    - userLookup: UserLookupService
    - performBlock(in from: User, in to: User): void
    - performUnblock(in from: User, in to: User): void
    - instance: BlockCommunicationService {static}
    + getInstance(): BlockCommunicationService {static}
    + block(in from: String, in to: String): void
    + unblock(in from: String, in to: String): void
}


class FollowCommunicationService implements FollowMediator, NotifiableDispatcher {
    - userLookup: UserLookupService
    - performFollow(in from: User, in to: User): void
    - performUnfollow(in from: User, in to: User): void
    - dispatchFollowEvent(in from: User, in to: User): void
    - dispatchUnfollowEvent(in from: User, in to: User): void
    - instance: FollowCommunicationService {static}
    + getInstance(): FollowCommunicationService {static}
}

class PostCommunicationService implements PostMediator, NotifiableDispatcher {
    - userLookup: UserLookupService
    - postLookup: PostLookupService
    - topicLookup: TopicLookupService
    - performPost(in post: Post): void
    - registerTopics(in post: Post): void
    - dispatchPostEvent(in post: Post): void
    - instance: PostCommunicationService {static}
    + getInstance(): PostCommunicationService {static}
    + post(in post: Post): void
}

class LikeCommunicationService implements LikeMediator, NotifiableDispatcher {
    - userLookup: UserLookupService
    - performLike(in from: User, in to: Post): void
    - performUnlike(in from: User, in to: Post): void
    - dispatchLikeEvent(in from: User, in to: Post): void
    - instance: LikeCommunicationService {static}
    + getInstance(): LikeCommunicationService {static}
}

abstract class UserActionBackend implements ServerEndpoint {
    # userLookup: UserLookupService
    # parseUser(in request: HTTPData): User
    + isRequestValid(in request: HTTPData): boolean {abstract}
    + handleRequest(in request: HTTPData): HTTPData {abstract}
}

class UserRegistrationBackend extends UserActionBackend {
    - userBuilder: UserBuilder
    - registerUser(in request: HTTPData): void
}

class BlockBackend extends UserActionBackend {
    - blockService: BlockCommunicationService
    - parseBlockToHandle(in request: HTTPData): String
    - handleBlockRequest(in from: User, in to: String): void
    - handleUnBlockRequest(in from: User, in to: String): void
}

class FollowBackend extends UserActionBackend {
    - followService: FollowCommunicationService
    - parseToHandle(in request: HTTPData): String
    - handleFollowRequest(in from: User, in to: String): void
    - handleUnFollowRequest(in from: User, in to: String): void
}

class PostBackend extends UserActionBackend {
    - postService: PostCommunicationService
    - textFactory: TextFactory
    - imageFactory: ImageFactory
    - videoFactory: VideoFactory
    - parseText(in request: HTTPData): String
    - handleImageUploads(in request: HTTPData): Iterable<String>
    - handleVideoUploads(in request: HTTPData): Iterable<String>
    - generatePost(in request: HTTPData): Post
    - handlePostRequest(in request: HTTPData): void
}

class LikeBackend extends UserActionBackend {
    - likeService: LikeCommunicationService
    - postLookup: PostLookupService
    - parsePostID(in request: HTTPData): int
    - handleLikeRequest(in from: User, in to: int): void
    - handleUnLikeRequest(in from: User, in to: int): void
}

HTTPData <.. ServerEndpoint
Notifiable <.. NotifiableObserver
Notifiable <.. NotifiableDispatcher
Notifiable "0..*" o-- "1" NotifiablesIterable
Notifiable "0..*" o-- "1" ContentIterable
Followable "0..*" o-- "1" Follower
Followable "0..*" o-- "1" Post
Follower "0..*" o-- "1" Followable
Follower <.. FollowMediator
Media "0..*" o-- "1" MediaIterable
Media "1..*" *-- "1" Tweet
Text <.. TextFactory
Image <.. ImageFactory
Video <.. VideoFactory
Post <.. Poster
Post <.. PostMediator
Post <.. PostBackend
ContentIterable "0..*" *-- "1" User
User <.. UserBuilder
User <.. UserLookupService
User <.. UserActionBackend
Blocker <.. BlockMediator
Liker <.. Likeable
Liker <.. LikeMediator
UserLookupService "1" o-- "1" BlockCommunicationService
UserLookupService "1" o-- "1" FollowCommunicationService
UserLookupService "1" o-- "1" PostCommunicationService
UserLookupService "1" o-- "1" LikeCommunicationService
UserLookupService "1" o-- "1" Tweet
UserLookupService "1" *-- "1" UserActionBackend
PostLookupService "1" o-- "1" PostCommunicationService
PostLookupService "1" o-- "1" Tweet
BlockCommunicationService "1" *-- "1" BlockBackend
FollowCommunicationService "1" *-- "1" FollowBackend
PostCommunicationService "1" *-- "1" PostBackend
LikeCommunicationService "1" *-- "1" LikeBackend
UserBuilder "1" *-- "1" UserRegistrationBackend
TextFactory "1" *-- "1" PostBackend
ImageFactory "1" *-- "1" PostBackend
VideoFactory "1" *-- "1" PostBackend
Topic <.. TopicLookupService

@enduml