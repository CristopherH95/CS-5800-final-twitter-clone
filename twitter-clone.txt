@startuml

/'
    builder => make tweets?
    observer => notify tweets?
    mediator => facilitate communication?
    decorator => add user abilities (e.g., admin)?
    iterator => enumerate tweets
    singleton => manage access to mediator?
'/

struct UpdateEvent {
    + String eventType
    + Object oldValue
    + Object newValue
}

interface UpdateEventObserver {
    + handleEvent(in event: UpdateEvent): void
}

interface UpdateEventDispatcher {
    + notifyObservers(in event: UpdateEvent): void
}

interface Notifiable {
    + getViewURI(): String
}

interface NotifiablesIterable {
    + iterator(): Iterator<Notifiable>
}

interface NotifiablesFeed extends NotifiablesIterable {
    + addToFeed(in item: Notifiable): void
}

interface Follower {
    + follow(in handle: String): void
    + unfollow(in handle: String): void
    + getFollowing(): Iterator<Followable>
}

interface Followable {
    + getHandle(): String
    + getFollowers(): Iterator<Follower>
}

interface FollowMediator {
    + follow(in from: String, in to: String): void
    + unfollow(in from: String, in to: String): void
}

interface Blocker {
    + block(in handle: String): void
}

interface BlockMediator {
    + block(in from: String, in to: String): void
}

interface Media {
    + getID(): int
    + getSource(): String
    + setSource(in source: String): void
    + getWebDisplay(): String
}

interface MediaIterable {
    + iterator(): Iterator<Media>
}

interface MediaContainer extends Media, MediaIterable {
    + addMedia(in media: Media): void
    + removeMedia(in mediaID: int): void 
}

interface Post extends MediaContainer, Notifiable {
    + getMentioned(): Iterator<Followable>
    + addReply(in replyPost: Post): void
    + boost(): void
    + delete(): void
}

interface Poster {
    + submitPost(in post: Post): void
}

interface PostMediator {
    + post(in post: Post): void
}

class Text implements Media {
    - String content
}

class Image implements Media {
    - String fileServerURL
}

class Video implements Media {
    - String fileServerURL
}

abstract class MediaFactory {
    + makeMedia(in source: String): Media
}

class TextFactory extends MediaFactory {

}

class ImageFactory extends MediaFactory {

}

class VideoFactory extends MediaFactory {

}

class User implements Follower, Followable, Poster, Blocker, UpdateEventObserver {
    - tweetsReader: TweetsIterable
}

class Tweet implements Post {
    
}

class TweetsIterable implements NotifiablesFeed {

}

class Topic implements Followable {

}

class BlockService implements BlockMediator {

}

class FollowService implements FollowMediator, UpdateEventDispatcher {

}

class PostService implements PostMediator, UpdateEventDispatcher {

}

UpdateEvent <.. UpdateEventObserver
UpdateEvent <.. UpdateEventDispatcher
Notifiable o-- NotifiablesIterable
Followable o-- Follower
Follower o-- Followable
Media o-- MediaIterable
Followable o-- Post
Text <.. TextFactory
Image <.. ImageFactory
Video <.. VideoFactory
Post <.. Poster
Post <.. PostMediator
TweetsIterable *-- User


@enduml